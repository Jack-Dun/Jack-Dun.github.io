<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Jack-Dun.github.io</id>
    <title>Jack-Dun&apos;s blog</title>
    <updated>2021-11-02T01:52:41.762Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Jack-Dun.github.io"/>
    <link rel="self" href="https://Jack-Dun.github.io/atom.xml"/>
    <subtitle>宝剑锋从磨砺出</subtitle>
    <logo>https://Jack-Dun.github.io/images/avatar.png</logo>
    <icon>https://Jack-Dun.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Jack-Dun&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[三人表决器的VHDL设计仿真与CMOS版图设计]]></title>
        <id>https://Jack-Dun.github.io/post/san-ren-biao-jue-qi-de-vhdl-she-ji-fang-zhen-yu-cmos-ban-tu-she-ji/</id>
        <link href="https://Jack-Dun.github.io/post/san-ren-biao-jue-qi-de-vhdl-she-ji-fang-zhen-yu-cmos-ban-tu-she-ji/">
        </link>
        <updated>2021-10-24T06:30:00.000Z</updated>
        <summary type="html"><![CDATA[<p>本设计三人表决器，是代表投票或举手表决的表决装置，为本人的课程设计。表决时，与会的有关人员只需按下各自表决器上赞成、反对或弃权的某一按钮，荧光屏上即显示出表决结果。在三人表决器中，三个人分别用手指拨动开关SW1、SW2、SW3 来表示自己的意愿，如果对某决议同意，各人就把自己的指拨开关拨到高电平（上方），不同意就把自己的指拨开关拨到低电平（下方）。表决结果用（高电平）显示，如果决议通过那么实验板上L2亮；如果不通过那么实验板上L1亮；如果对某个决议有任意二到三人同意，那么此决议通过，L2亮；如果对某个决议只有一个人或没人同意，那么此决议不通过，L1亮。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本设计三人表决器，是代表投票或举手表决的表决装置，为本人的课程设计。表决时，与会的有关人员只需按下各自表决器上赞成、反对或弃权的某一按钮，荧光屏上即显示出表决结果。在三人表决器中，三个人分别用手指拨动开关SW1、SW2、SW3 来表示自己的意愿，如果对某决议同意，各人就把自己的指拨开关拨到高电平（上方），不同意就把自己的指拨开关拨到低电平（下方）。表决结果用（高电平）显示，如果决议通过那么实验板上L2亮；如果不通过那么实验板上L1亮；如果对某个决议有任意二到三人同意，那么此决议通过，L2亮；如果对某个决议只有一个人或没人同意，那么此决议不通过，L1亮。</p>
<!-- more -->
<p><a href="https://github.com/Jack-Dun/VHDL-Simulation-and-CMOS-Layout-of-Three-Person-Voting-Device">✋三人表决器的CMOS版图设计（Github）</a><br>
<a href="https://github.com/Jack-Dun">💡本人Github</a></p>
<h1 id="vhdl-simulation-and-cmos-layout-of-three-person-voting-device">VHDL-Simulation-and-CMOS-Layout-of-Three-Person-Voting-Device</h1>
<h1 id="三人表决器的vhdl设计仿真与cmos版图设计">三人表决器的VHDL设计仿真与CMOS版图设计</h1>
<ol>
<li>独立完成集成电路的设计过程；</li>
<li>对电路进行仿真验证；</li>
<li>根据所用的工艺，选取合理的模型库；</li>
<li>选用以lambda为单位的设计规则；</li>
<li>全手工、层次化设计版图；</li>
<li>达到指导书提出的设计指标要求；</li>
<li>用VHDL进行电路的前期功能设计与仿真；</li>
<li>用CMOS设计出合理且切实可行的逻辑电路；</li>
<li>进行版图绘制，并进行检测。</li>
</ol>
<h1 id="cmos版图">CMOS版图</h1>
<figure data-type="image" tabindex="1"><img src="https://Jack-Dun.github.io/post-images/1635814746960.png" alt="" loading="lazy"></figure>
<h1 id="vhdl代码">VHDL代码</h1>
<pre><code>library ieee;
use ieee.std_logic_1164.all;
entity bjq is
port(
          a:in std_logic_vector(2 downto 0); --3个人
          num:buffer integer range 0 to 3; --表决通过人数
co:out std_logic); --是否通过信号
end bjq;
architecture art of bjq is
    Begin
process(a)
variable b:integer range 0 to 3; --定义变量b
begin
    b:=0;
    for n in 0 to 2 loop
if a(n)='1' then
b:=b+1; --统计通过人数
end if;
    end loop;
num&lt;=b;
    if(b&gt;=2)then co&lt;='1';
    else co&lt;='0';
    end if;
end process;
end art;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于C51单片机的交通灯显示系统设计]]></title>
        <id>https://Jack-Dun.github.io/post/ji-yu-c51-dan-pian-ji-de-jiao-tong-deng-xian-shi-xi-tong-she-ji/</id>
        <link href="https://Jack-Dun.github.io/post/ji-yu-c51-dan-pian-ji-de-jiao-tong-deng-xian-shi-xi-tong-she-ji/">
        </link>
        <updated>2021-07-02T01:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>本文是基于AT89C51设计并制作的交通灯显示系统，为本人的课程设计。<br>
1. 东西方向、南北方向均有红、黄、绿三种信号灯；<br>
2. 带紧急制动按钮，按钮按下，所有方向亮红灯；再次按下，恢复正常显示；<br>
3. 夜间模式按钮按下，所有方向显示黄灯闪烁；<br>
4. 实时提醒绿灯亮的剩余时间（用两位数码管显示，使用共阴极数码管）。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本文是基于AT89C51设计并制作的交通灯显示系统，为本人的课程设计。<br>
1. 东西方向、南北方向均有红、黄、绿三种信号灯；<br>
2. 带紧急制动按钮，按钮按下，所有方向亮红灯；再次按下，恢复正常显示；<br>
3. 夜间模式按钮按下，所有方向显示黄灯闪烁；<br>
4. 实时提醒绿灯亮的剩余时间（用两位数码管显示，使用共阴极数码管）。</p>
<!-- more -->
<p><a href="https://github.com/Jack-Dun/Traffic-Light-Display-System-Based-on-C51">🚥基于C51单片机的交通灯显示系统设计仓库（Github）</a><br>
<a href="https://github.com/Jack-Dun">🍑本人Github</a></p>
<h1 id="traffic-light-display-system-based-on-c51">Traffic-Light-Display-System-Based-on-C51</h1>
<h1 id="基于c51单片机的交通灯显示系统设计">基于C51单片机的交通灯显示系统设计</h1>
<p>如今，交通信号灯在城市的每个十字路口都扮演着重要的角色。交通信号灯的出现，极大的方便了人们的生活。本系统采用AT89C51为中心器件来设计交通灯控制器，系统实用性强、操作简单，能够模拟十字路口交通灯的各种状态显示以及倒计时时间。本设计系统由单片机，交通灯状态显示系统、LED数码显示系统等几大部分组成。<br>
系统除基本的交通灯功能外，还具有倒计时、紧急情况处理等功能，较好的模拟实现了十字路口可能出现的状况。本系统采用C语言编写，主要编写了主程序，LED数码管显示程序等。<br>
关键词：AT89C51、C语言、交通灯</p>
<h1 id="仿真">仿真</h1>
<p>设计交通灯显示系统的硬件电路与软件程序，给出硬件系统的电路原理图与PCB图，对硬件电路与软件分别进行调试，得到调试成功的交通灯显示系统。<br>
<img src="https://Jack-Dun.github.io/post-images/1635390863337.bmp" alt="" loading="lazy"></p>
<h1 id="代码">代码</h1>
<pre><code class="language-#include">
sbit Red_nb=P2^6;		                //南北红灯标志
sbit Yellow_nb=P2^5;	                //南北黄灯标志
sbit Green_nb=P2^4;                     //南北绿灯标志

sbit Red_dx=P2^3;		                //东西红灯标志
sbit Yellow_dx=P2^2;	                //东西黄灯标志
sbit Green_dx=P2^1;		                //东西绿灯标志

bit dx_nb=0;			                //东西南北控制位
bit Yellow_status=0;	                //黄灯闪烁标志位

unsigned char  sec_dx;  		    	//东西方向时间存储变量
unsigned char  sec_nb;			    	//南北方向时间存储变量
float  set_timedx=30;			    	//东西方向的通行单次时间
float  set_timenb=30;				    //南北方向的通行单次时间
unsigned char  buf[4];				    //秒显示的变量
unsigned char data countt0;             //定时器0中断计数器
unsigned char data countt1;             //定时器1中断计数器

unsigned char flag_option=0;            //功能选择位:1 紧急模式；2 夜间模式

sbit  key_EP=P3^2;		                //紧急模式
unsigned char conut_ER;                 //紧急状态

sbit  key_night=P3^3;		            //夜间模式
unsigned char flag_Night;		        //夜间状态
unsigned char conut_night;              //夜间模式

unsigned char code led[11]={	        //共阴极字型码
    0x3f,  //--0
    0x06,  //--1
    0x5b,  //--2
    0x4f,  //--3
    0x66,  //--4
    0x6d,  //--5
    0x7d,  //--6
    0x07,  //--7
    0x7f,  //--8
    0x6f,  //--9
    0x00   //--NULL
};



/*延时函数*/
void delay(int time)
{
    unsigned int j,k;
    for(j=0;j&lt;time;j++)			
       for(k=0;k&lt;124;k++);		
}

/*显示函数*/
void display(void)
{
    buf[0]=sec_nb/10; 		//第1位 东西十位
    buf[1]=sec_nb%10; 		//第2位 东西个位
    buf[2]=sec_dx/10; 		//第3位 南北十位
    buf[3]=sec_dx%10; 		//第4位 南北个位
    P1=0xfe;           		//LED1
    P0=led[buf[0]];		    //东西十位
    delay(1);
    P1=0xfd;             	//LED2
    P0=led[buf[1]];		    //东西个位
    delay(1);				
    P1=0Xfb;		  		//LED3
    P0=led[buf[2]];		    //南北十位
    delay(1);				
    P1=0Xf7;				//LED4
    P0=led[buf[3]];		    //南北个位
    delay(1);				
}

/*功能函数*/
void function(void)
{
    switch (flag_option)
    {
        case 1:
        {
            conut_ER=1-conut_ER;
            if(conut_ER==1)
            {
                TR0=0;						//关交通灯定时器
                P2=0x00;					//关全部信号灯
                Red_dx=1;                   //全部置红灯
                Red_nb=1;
            }		
            if(conut_ER==0)
            {
                TR0=1;						//开交通灯定时器
                P2=0X00;					//关全部信号灯
                Green_dx=1;					//东西绿灯亮
                Red_nb=1;					//南北红灯亮
                sec_dx=set_timedx;          //回到初值
                sec_nb=sec_dx+5;
            }	
            flag_option=0;	
            break;
        }
        case 2:
        {
            conut_night=1-conut_night;
            if(conut_night==1)
            {
                TR0=0;						//关交通灯定时器
                P2=0x00;                    //关全部信号灯
                flag_Night=1;               //打开夜间模式
                sec_dx=00;					//四个方向的时间都为00
                sec_nb=00;
            }
            if(conut_night==0)
            {
                TR0=1;						//开交通灯定时器
                P2=0x00;                    //关全部信号灯
                Green_dx=1;					//东西绿灯亮
                Red_nb=1;					//南北红灯亮
                flag_Night=0;               //打开夜间模式
                sec_dx=set_timedx;          //回到初值
                sec_nb=sec_dx+5;
            }
            flag_option=0;
            break;
        }
        default:
            break;
    }
}

/*处理整个交通灯计时*/
void time0(void) interrupt 1 using 1  	//定时中断子程序
{
    TH0=0x4C;							//重赋初值;11.0592m晶振50ms
    TL0=0X00;
    TR0=1;								//开交通灯定时器
    countt0++;							//计数器数加1（用于计算时间）
    if(countt0==20)	                  	//定时器中断次数=20时（即1秒时）
    {	
        countt0=0;						//清零计数器
        sec_dx--;						//东西时间减1
        sec_nb--;						//南北时间减1
        if(sec_nb==0&amp;&amp;sec_dx==5&amp;&amp;(Yellow_status==0))    //当南北倒计时到0时，重置5秒，用于黄灯闪烁时间
        {
            sec_nb=5;
            Yellow_status=1;
        }
        if(sec_dx==0&amp;&amp;sec_nb==5&amp;&amp;(Yellow_status==0))    //当东西倒计时到0时，重置5秒，用于黄灯闪烁时间
        {
            sec_dx=5;
            Yellow_status=1;			//启动黄灯开始倒计时
        }
        if((sec_nb&lt;=5)&amp;&amp;(dx_nb==0)&amp;&amp;(Yellow_status==1))  		//东西黄灯闪
        {
            Green_dx=0;
            Yellow_dx=~Yellow_dx;
        }
        if((sec_dx&lt;=5)&amp;&amp;(dx_nb==1)&amp;&amp;(Yellow_status==1))  		//南北黄灯闪
        {
            Green_nb=0;
            Yellow_nb=~Yellow_nb;
        }
        if(dx_nb==0&amp;&amp;sec_nb==0&amp;&amp;sec_dx==0)      //东西通行：当黄灯时间、通行方向倒计时到0时
        {
            P2=0x00;					//重置东西南背方向的红绿灯
            Green_nb=1;					//南北绿灯亮
            Red_dx=1;					//东西红灯亮
            dx_nb=!dx_nb;				//交换通行方向
            Yellow_status=0;			//关闭黄灯闪烁
            sec_dx=set_timedx+5;		//重赋东西方向的起始值
            sec_nb=set_timenb;		    //重赋南北方向的起始值
        }
        if(dx_nb==1&amp;&amp;sec_dx==0&amp;&amp;sec_nb==0)      //南北通行：当黄灯时间、通行方向倒计时到0时
        {
            P2=0X00;					//重置东西南北的红绿灯状态
            Green_dx=1;					//东西绿灯亮
            Red_nb=1;					//南北红灯亮
            dx_nb=!dx_nb;				//交换通行方向
            Yellow_status=0;            //关闭黄灯闪烁
            sec_dx=set_timedx;          //重赋东西方向的起始值
            sec_nb=set_timenb+5;        //重赋南北方向的起始值
        }
    }
}

/*用来处理夜间黄灯闪烁*/
void time1(void) interrupt 3 			//定时中断子程序
{
    TH1=0x4C;							//重赋初值;11.0592m晶振50ms
    TL1=0X00;
    countt1++;							//计数器数加1（用于计算时间）
    if(countt1==10)					    //定时器中断次数=10时（即0.5秒）
	{	   
		if(flag_Night==1)
	    {
			Yellow_nb=~Yellow_nb;		//南北黄灯
			Yellow_dx=~Yellow_nb;		//东西黄灯   
		}	
	} 
    if(countt1==20)	                  	//定时器中断次数=20时（即1秒时）
    {
        countt1=0;						//清零计数器
        if(flag_Night==1)
        {
            Yellow_nb=~Yellow_nb;		//南北黄灯
            Yellow_dx=~Yellow_nb;		//东西黄灯
        }
    }
}


//外部中断0
void int0(void) interrupt 0 using 1	    //紧急模式
{
    while(!key_EP)display();
    flag_option=1;
}

//外部中断1
void int1(void) interrupt 2 using 1	    //夜间模式
{
    while(!key_night)display();
    flag_option=2;
}

/*初始化函数*/
void init()
{
    TMOD=0X11;	   						//定时器设置
    TH1=0x4C;							//TH1重赋初值;11.0592m晶振50ms
    TL1=0X00;
    TH0=0x4C;							//TH0重赋初值;11.0592m晶振50ms
    TL0=0X00;
    TCON=0X50;							//启动定时0、定时1
    IE=0x8F;							//开总中断;定时器1中断开启;开外部中断1;定时器0中断开启;开外部中断
    P2=0Xc3;							//开始默认状态，东西绿灯，南北黄灯
    sec_nb=35;							//南北方向初始时间
    sec_dx=30;							//东西方向初始时间
}

//主程序
void main()
{
    init();								//初始化定时器、中断服务
    while(1)					 		
    {
        if(flag_option!=0)function(); 	//调用功能函数
        display(); 						//调用显示函数
    }
}```

</code></pre>
]]></content>
    </entry>
</feed>